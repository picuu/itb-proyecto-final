@startuml diagrama-clases

class User {
  == attributes ==
  + id: Int
  + name: String
  + surname: String
  + email: String
  + phone: String
  + balance: Float
  + history: Array(History)
  + valorations: Array(Valoration)
  + auth_level: AuthLevel

  == methods ==
  + constructor(Int, String, String, String, String, Float, Array(History), Array(Valoration), AuthLevel)

  + createOffer()
  + updateOffer()
  + deleteOffer()
  + subscribe()
  + unsubscribe()
  + updateProfile()
  + sendMessage()
  + addValoration()
  + updateValoration()
  + removeValoration()
  + update()
  + delete()
}

enum AuthLevel {
  USER
  ADMIN
}

class Valoration {
  == attributes ==
  + id: Int
  + owner_id: Int
  + valorated_member: Int
  + punctuation: Int
  + description: String

  == methods ==
  + constructor(Int, Int, Int, Int, String)
}

class History {
  == attributes ==
  + publisher_id: Int
  + enrolled_id: Int
  + offer: Object(Offer)
  + booking: Object(Booking)
}

class Booking {
  == attributes ==
  + id: Int
  + publisher_id: Int
  + enrolled_id: Int
  + offer_id: Int
  + date: Date
}

class Date {
  + day: Int
  + month: Int
  + year: Int
  + hour: Int
  + minute: Int
}

class Category {
  == attributes ==
  + id: Int
  + name: String

  == methods ==
  + constructor(Int, String)
}

class Tag {
  == attributes ==
  + id: Int
  + name: String

    == methods ==
  + constructor(Int, String)
}

Abstract class Offer {
  == attributes ==
  + id: Int 
  + owner_id: Int
  + title: String
  + description: String
  + category: Category
  + tags: Array(Tag)
  + time: Float
  + ubication: String
  + availability: Array(Date)
  + publish_date: Date

  == methods ==
  + constructor(Int, Int, String, String, Category, Array(Tag), Float, String, Array(Date), Date)

  + update()
  + delete()
}

class Service {
  == attributes ==
  + subscribed_user: Int

  == methods ==
  + constructor(Int): super(Int, Int, String, String, Category, Array(Tag), Float, String, Array(String), Date)
}

class Taller {
  == attributes ==
  + volunteers: Array(Int)
  + subscribed_users: Array(Int)
  + max_subscribeds: Int

  == methods ==
  + constructor(Int, Array(Int), Int): super(Int, Int, String, String, Category, Array(Tag), Float, String, Array(String), Date)

  + addVolunteer()
  + removeVolunteer()
  + addSubscribed()
  + removeSubscribed()
}

class Demanda {
  == methods ==
  + constructor(): super(Int, Int, String, String, Category, Array(Tag), Float, String, Array(String), Date)
}

User *- History
User *- Valoration

History *- User
History *- Offer
History *- Booking

Booking *- User

Offer *- User
Offer *- Tag
Offer *- Category

Offer <|-- Service
Offer <|-- Taller
Offer <|-- Demanda

@enduml